Model 1:

optimizer = SGD(lr=0.001, momentum=0.9)

def __init__(self):
super(Net, self).__init__()
self.conv1 = nn.Conv2d(3, 6, 5)
self.pool = nn.MaxPool2d(2, 2)
self.conv2 = nn.Conv2d(6, 16, 5)
self.fc1 = nn.Linear(16 * 5 * 5, 120)
self.fc2 = nn.Linear(120, 84)
self.fc3 = nn.Linear(84, 10)

[1,  2000] loss: 2.197
[1,  4000] loss: 1.871
[1,  6000] loss: 1.670
[1,  8000] loss: 1.582
[1, 10000] loss: 1.508
[1, 12000] loss: 1.464
[2,  2000] loss: 1.390
[2,  4000] loss: 1.390
[2,  6000] loss: 1.327
[2,  8000] loss: 1.331
[2, 10000] loss: 1.293
[2, 12000] loss: 1.292
Finished Training

Accuracy of the network on the 10000 test images: 55 %

Accuracy of plane : 62 %
Accuracy of   car : 56 %
Accuracy of  bird : 45 %
Accuracy of   cat : 33 %
Accuracy of  deer : 44 %
Accuracy of   dog : 51 %
Accuracy of  frog : 68 %
Accuracy of horse : 52 %
Accuracy of  ship : 61 %
Accuracy of truck : 76 %

Model 2 :

Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (dropout): Dropout(p=0.5, inplace=False)
)

optimizer = SGD(lr=0.001, momentum=0.9)

[1,  2000] loss: 2.245
[1,  4000] loss: 2.017
[1,  6000] loss: 1.897
[1,  8000] loss: 1.810
[1, 10000] loss: 1.766
[1, 12000] loss: 1.693
[2,  2000] loss: 1.613
[2,  4000] loss: 1.632
[2,  6000] loss: 1.593
[2,  8000] loss: 1.583
[2, 10000] loss: 1.567
[2, 12000] loss: 1.575
Finished Training


Accuracy of plane : 40 %
Accuracy of   car : 50 %
Accuracy of  bird : 41 %
Accuracy of   cat : 11 %
Accuracy of  deer : 33 %
Accuracy of   dog : 67 %
Accuracy of  frog : 65 %
Accuracy of horse : 36 %
Accuracy of  ship : 70 %
Accuracy of truck : 47 %

Model 3 : 

Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (dropout): Dropout(p=0.2, inplace=False)
)

optimizer = SGD(lr=0.001, momentum=0.9)

Accuracy of the network on the 10000 test images: 51 %

[1,  2000] loss: 2.223
[1,  4000] loss: 1.906
[1,  6000] loss: 1.740
[1,  8000] loss: 1.655
[1, 10000] loss: 1.611
[1, 12000] loss: 1.542
[2,  2000] loss: 1.487
[2,  4000] loss: 1.472
[2,  6000] loss: 1.434
[2,  8000] loss: 1.413
[2, 10000] loss: 1.376
[2, 12000] loss: 1.375
Finished Training

Accuracy of plane : 73 %
Accuracy of   car : 60 %
Accuracy of  bird : 31 %
Accuracy of   cat : 23 %
Accuracy of  deer : 29 %
Accuracy of   dog : 73 %
Accuracy of  frog : 62 %
Accuracy of horse : 58 %
Accuracy of  ship : 39 %
Accuracy of truck : 65 %

Model 4 : 25 epochs + Dropout (0.1)

Net(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=400, out_features=120, bias=True)
  (fc2): Linear(in_features=120, out_features=84, bias=True)
  (fc3): Linear(in_features=84, out_features=10, bias=True)
  (dropout): Dropout(p=0.1, inplace=False)
)

[1,  2000] loss: 2.188
[1,  4000] loss: 1.890
[1,  6000] loss: 1.728
[1,  8000] loss: 1.648
[1, 10000] loss: 1.593
[1, 12000] loss: 1.549
[2,  2000] loss: 1.491
[2,  4000] loss: 1.471
[2,  6000] loss: 1.427
[2,  8000] loss: 1.430
[2, 10000] loss: 1.387
[2, 12000] loss: 1.367
[3,  2000] loss: 1.307
[3,  4000] loss: 1.299
[3,  6000] loss: 1.306
[3,  8000] loss: 1.313
[3, 10000] loss: 1.274
[3, 12000] loss: 1.272
[4,  2000] loss: 1.219
[4,  4000] loss: 1.216
[4,  6000] loss: 1.245
[4,  8000] loss: 1.190
[4, 10000] loss: 1.207
[4, 12000] loss: 1.190
[5,  2000] loss: 1.126
[5,  4000] loss: 1.172
[5,  6000] loss: 1.175
[5,  8000] loss: 1.157
[5, 10000] loss: 1.139
[5, 12000] loss: 1.133
[6,  2000] loss: 1.099
[6,  4000] loss: 1.080
[6,  6000] loss: 1.111
[6,  8000] loss: 1.090
[6, 10000] loss: 1.090
[6, 12000] loss: 1.105
[7,  2000] loss: 1.060
[7,  4000] loss: 1.060
[7,  6000] loss: 1.065
[7,  8000] loss: 1.079
[7, 10000] loss: 1.057
[7, 12000] loss: 1.087
[8,  2000] loss: 1.018
[8,  4000] loss: 1.034
[8,  6000] loss: 1.003
[8,  8000] loss: 1.046
[8, 10000] loss: 1.042
[8, 12000] loss: 1.058
[9,  2000] loss: 0.990
[9,  4000] loss: 0.987
[9,  6000] loss: 1.007
[9,  8000] loss: 1.019
[9, 10000] loss: 1.008
[9, 12000] loss: 1.018
[10,  2000] loss: 0.960
[10,  4000] loss: 0.980
[10,  6000] loss: 1.004
[10,  8000] loss: 0.983
[10, 10000] loss: 0.986
[10, 12000] loss: 1.014
[11,  2000] loss: 0.926
[11,  4000] loss: 0.952
[11,  6000] loss: 0.965
[11,  8000] loss: 0.986
[11, 10000] loss: 0.971
[11, 12000] loss: 0.980
[12,  2000] loss: 0.924
[12,  4000] loss: 0.930
[12,  6000] loss: 0.943
[12,  8000] loss: 0.951
[12, 10000] loss: 0.959
[12, 12000] loss: 0.982
[13,  2000] loss: 0.897
[13,  4000] loss: 0.930
[13,  6000] loss: 0.928
[13,  8000] loss: 0.942
[13, 10000] loss: 0.956
[13, 12000] loss: 0.964
[14,  2000] loss: 0.896
[14,  4000] loss: 0.943
[14,  6000] loss: 0.927
[14,  8000] loss: 0.918
[14, 10000] loss: 0.938
[14, 12000] loss: 0.916
[15,  2000] loss: 0.887
[15,  4000] loss: 0.891
[15,  6000] loss: 0.903
[15,  8000] loss: 0.908
[15, 10000] loss: 0.910
[15, 12000] loss: 0.942
[16,  2000] loss: 0.872
[16,  4000] loss: 0.889
[16,  6000] loss: 0.900
[16,  8000] loss: 0.874
[16, 10000] loss: 0.921
[16, 12000] loss: 0.944
[17,  2000] loss: 0.873
[17,  4000] loss: 0.865
[17,  6000] loss: 0.894
[17,  8000] loss: 0.891
[17, 10000] loss: 0.909
[17, 12000] loss: 0.918
[18,  2000] loss: 0.859
[18,  4000] loss: 0.867
[18,  6000] loss: 0.874
[18,  8000] loss: 0.901
[18, 10000] loss: 0.921
[18, 12000] loss: 0.916
[19,  2000] loss: 0.870
[19,  4000] loss: 0.868
[19,  6000] loss: 0.872
[19,  8000] loss: 0.884
[19, 10000] loss: 0.899
[19, 12000] loss: 0.890
[20,  2000] loss: 0.854
[20,  4000] loss: 0.828
[20,  6000] loss: 0.858
[20,  8000] loss: 0.909
[20, 10000] loss: 0.908
[20, 12000] loss: 0.899
[21,  2000] loss: 0.851
[21,  4000] loss: 0.842
[21,  6000] loss: 0.847
[21,  8000] loss: 0.868
[21, 10000] loss: 0.869
[21, 12000] loss: 0.913
[22,  2000] loss: 0.842
[22,  4000] loss: 0.833
[22,  6000] loss: 0.864
[22,  8000] loss: 0.860
[22, 10000] loss: 0.886
[22, 12000] loss: 0.883
[23,  2000] loss: 0.841
[23,  4000] loss: 0.829
[23,  6000] loss: 0.856
[23,  8000] loss: 0.865
[23, 10000] loss: 0.873
[23, 12000] loss: 0.874
[24,  2000] loss: 0.813
[24,  4000] loss: 0.856
[24,  6000] loss: 0.859
[24,  8000] loss: 0.848
[24, 10000] loss: 0.872
[24, 12000] loss: 0.865
[25,  2000] loss: 0.818
[25,  4000] loss: 0.847
[25,  6000] loss: 0.859
[25,  8000] loss: 0.809
[25, 10000] loss: 0.885
[25, 12000] loss: 0.866
Finished Training

Accuracy of the network on the 10000 test images: 64 %

Accuracy of plane : 60 %
Accuracy of   car : 76 %
Accuracy of  bird : 45 %
Accuracy of   cat : 49 %
Accuracy of  deer : 70 %
Accuracy of   dog : 44 %
Accuracy of  frog : 72 %
Accuracy of horse : 63 %
Accuracy of  ship : 83 %
Accuracy of truck : 77 %

Model 5:awesome NN 

CNN(
  (conv_layer): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (10): ReLU(inplace=True)
    (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (12): Dropout2d(p=0.05, inplace=False)
    (13): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (14): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (15): ReLU(inplace=True)
    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace=True)
    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (fc_layer): Sequential(
    (0): Dropout(p=0.1, inplace=False)
    (1): Linear(in_features=4096, out_features=1024, bias=True)
    (2): ReLU(inplace=True)
    (3): Linear(in_features=1024, out_features=512, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.1, inplace=False)
    (6): Linear(in_features=512, out_features=10, bias=True)
  )
)

[1,  2000] loss: 1.883
[1,  4000] loss: 1.524
[1,  6000] loss: 1.285
[1,  8000] loss: 1.149
[1, 10000] loss: 1.048
[1, 12000] loss: 0.968
[2,  2000] loss: 0.873
[2,  4000] loss: 0.819
[2,  6000] loss: 0.793
[2,  8000] loss: 0.764
[2, 10000] loss: 0.765
[2, 12000] loss: 0.724
Finished Training

Accuracy of the network on the 10000 test images: 75 %

Accuracy of plane : 82 %
Accuracy of   car : 93 %
Accuracy of  bird : 50 %
Accuracy of   cat : 74 %
Accuracy of  deer : 76 %
Accuracy of   dog : 51 %
Accuracy of  frog : 87 %
Accuracy of horse : 77 %
Accuracy of  ship : 82 %
Accuracy of truck : 81 %




